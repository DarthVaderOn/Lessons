# JSON Web Tokens (JWT) (https://jwt.io/)
# Структура JSON Web Tokens
# Заголовок (HEADER:ALGORITHM & TOKEN TYPE)
# Полезная нагрузка (PAYLOAD:DATA)
# Подпись (VERIFY SIGNATURE)


"""
JSON Web Tokens (JWT)


        JSON Web Token (JWT) — это открытый стандарт (RFC 7519) для создания токенов доступа, основанный на формате JSON. Как правило, используется для передачи данных для аутентификации в клиент-серверных приложениях.
    Токены создаются сервером, подписываются секретным ключом и передаются клиенту, который в дальнейшем использует данный токен для подтверждения своей личности.


Структура JSON Web Tokens


    Структура
        Токен JWT состоит из трех частей: заголовка (HEADER), полезной нагрузки (PAYLOAD) и подписи или данных шифрования. Первые два элемента — это JSON объекты определенной структуры. Третий элемент вычисляется на основании
    первых и зависит от выбранного алгоритма (в случае использования неподписанного JWT может быть опущен). Токены могут быть перекодированы в компактное представление (JWS/JWE Compact Serialization): к заголовку и полезной
    нагрузке применяется алгоритм кодирования Base64-URL, после чего добавляется подпись и все три элемента разделяются точками («.»).
    К примеру, для заголовка и полезной нагрузки, которые выглядят следующим образом:

        {
          "alg": "HS512",
          "typ": "JWT"
        }
        {
          "sub": "12345",
          "name": "John Gold",
          "admin": true
        }

    Получим следующее компактное представление (переводы строки добавлены для наглядности):

        eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.
        eyJzdWIiOiIxMjM0NSIsIm5hbWUiOiJKb2huIEdvbGQiLCJhZG1pbiI6dHJ1ZX0K.
        LIHjWCBORSWMEibq-tnT8ue_deUqZx1K0XxCOXZRrBI


Заголовок (HEADER:ALGORITHM & TOKEN TYPE)


    В заголовке указывается необходимая информация для описания самого токена. Обязательный ключ здесь только один:

        - alg: алгоритм, используемый для подписи/шифрования (в случае неподписанного JWT используется значение «none»).

    Необязательные ключи:

        - typ: тип токена (type). Используется в случае, когда токены смешиваются с другими объектами, имеющими JOSE заголовки. Должно иметь значение «JWT».
        - cty: тип содержимого (content type). Если в токене помимо зарегистрированных служебных ключей есть пользовательские, то данный ключ не должен присутствовать. В противном случае должно иметь значение «JWT»


Полезная нагрузка (PAYLOAD:DATA)


    В данной секции указывается пользовательская информация (например, имя пользователя и уровень его доступа), а также могут быть использованы некоторые служебные ключи. Все они являются необязательными:

        - iss: чувствительная к регистру строка или URI, которая является уникальным идентификатором стороны, генерирующей токен (issuer).
        - sub: чувствительная к регистру строка или URI, которая является уникальным идентификатором стороны, о которой содержится информация в данном токене (subject). Значения с этим ключом должны быть уникальны в контексте стороны, генерирующей JWT.
        - aud: массив чувствительных к регистру строк или URI, являющийся списком получателей данного токена. Когда принимающая сторона получает JWT с данным ключом, она должна проверить наличие себя в получателях — иначе проигнорировать токен (audience).
        - exp: время в формате Unix Time, определяющее момент, когда токен станет невалидным (expiration).
        - nbf: в противоположность ключу exp, это время в формате Unix Time, определяющее момент, когда токен станет валидным (not before).
        - jti: строка, определяющая уникальный идентификатор данного токена (JWT ID).[3]
        - iat: время в формате Unix Time, определяющее момент, когда токен был создан. iat и nbf могут не совпадать, например, если токен был создан раньше, чем время, когда он должен стать валидным (issued at).


Подпись (VERIFY SIGNATURE)

        Чтобы создать часть подписи, вы должны взять закодированный заголовок, закодированную полезную нагрузку, секрет, алгоритм, указанный в заголовке, и подписать это. Например, если вы хотите использовать алгоритм HMAC SHA256,
    подпись будет создана следующим образом:

        HMACSHA256(
          base64UrlEncode(header) + "." +
          base64UrlEncode(payload),
          secret)

    Подпись используется для проверки того, что сообщение не было изменено по пути, а в случае токенов, подписанных с помощью закрытого ключа, она также может проверить, что отправитель JWT является тем, за кого себя выдает.
"""