# Django Celery Beat
# Установка и настройка Django Celery Beat
# Асинхронный Python: GIL(Global Interpreter Lock)


"""
Django Celery Beat


        Django Celery Beat - это расширение позволяет хранить расписание периодических задач в базе данных.
    Периодическими задачами можно управлять из интерфейса администратора Django, где вы можете создавать, редактировать
    и удалять периодические задачи и определять, как часто они должны выполняться.


Установка и настройка Django Celery Beat


    В командной строке пишем (не забываем обновить requirements.txt):

        pip install -U django-celery-beat


    Далее заходим в settings.py и добавляем в INSTALLED_APPS:

        INSTALLED_APPS = [
            ...,
            'django_celery_beat',
        ]


    Применяем миграции:

        python manage.py makemigrations
        python manage.py migrate


    Заходим в админку должно появиться новое меню PERIODIC TASKS


Асинхронный Python: GIL(Global Interpreter Lock)


        Python Global Interpreter Lock (GIL) — это своеобразная блокировка, позволяющая только одному потоку управлять интерпретатором Python. Это означает, что в любой момент времени будет выполняться только один
    конкретный поток. Работа GIL может казаться несущественной для разработчиков, создающих однопоточные программы. Но во многопоточных программах отсутствие GIL может негативно сказываться на производительности
    процессоро-зависимых программ. Поскольку GIL позволяет работать только одному потоку даже в многопоточном приложении, он заработал репутацию «печально известной» функции.


        import asyncio

        async def task(task_id):
            await asyncio.sleep(3)
            print(f'Task {task_id} done')

        if __name__ == '__main__':
            tasks = [task(i) for i in range(10)]
            asyncio.run(asyncio.wait(tasks))

        Выполнится следующий код спустя 3 секунды сразу а не каждую операцию с интервалом 3 секунды:

            Task 3 done
            Task 9 done
            Task 4 done
            Task 5 done
            Task 2 done
            Task 0 done
            Task 6 done
            Task 1 done
            Task 7 done
            Task 8 done

        Если посмотреть время выполнения каждой операции то увидим что она выполнялось по очереди, разница в наносекундах.

        asyncio — это библиотека для написания параллельного кода с использованием синтаксиса async/await.
    asyncio используется в качестве основы для нескольких асинхронных фреймворков Python, которые обеспечивают высокопроизводительные сетевые и веб-серверы, библиотеки подключения к базам данных, распределенные очереди задач и т.д.
    asyncio часто идеально подходит для кода, связанного с вводом-выводом, и высокоуровневого структурированного сетевого кода.

    Asyncio предоставляет набор высокоуровневых API для:
     - запускайте сопрограммы Python одновременно и полностью контролируйте их выполнение;
     - выполнять сетевой ввод-вывод и IPC ;
     - подпроцессы управления ;
     - распределять задачи по очередям ;
     - синхронизировать параллельный код;

    Кроме того, существуют низкоуровневые API для разработчиков библиотек и фреймворков , позволяющие:
     - создавать циклы событий и управлять ими , которые предоставляют асинхронные API для networkingзапуска subprocesses, обработки и т.д.;
     - реализовать эффективные протоколы с использованием транспорта ;
     - объединять библиотеки на основе обратных вызовов и код с синтаксисом async/await.
"""