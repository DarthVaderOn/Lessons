# Heroku https://www.heroku.com/
# Загрузка проекта
# Создание superuser
# Отправка писем при регистрации на heroku


"""

Heroku


        Heroku — облачная PaaS-платформа, поддерживающая ряд языков программирования. С 2010 года
    является дочерней компанией Salesforce.com. Heroku, одна из первых облачных платформ, появилась
    в июне 2007 года и изначально поддерживала только язык программирования Ruby, но на данный
    момент список поддерживаемых языков также включает в себя Java, Node.js, Scala, Clojure,
    Python, Go, Ruby и PHP. На серверах Heroku используются операционные системы Debian или Ubuntu.


Загрузка проекта


    Переходим на страницу и смотрим видеоинструкцию:

        https://www.heroku.com/python


    Переходим на страницу:

        https://dashboard.heroku.com/apps


    Нажимаем

        New -> Create new app


    Выбираем имя проекта:

        django-project-darthvaderon


    Выбираем регион

        Europe


    Нажимаем:

        Create app


    Устанавливаем Heroku CLI:

        https://devcenter.heroku.com/articles/heroku-cli


    Создаем файл Procfile (без расширения/типа файла) в корне проекта и пишем код:

        web: gunicorn Django.wsgi


    Создаем файл Procfile.windows (без расширения/типа файла) в корне проекта и пишем код:

        web: python manage.py runserver 0.0.0.0:5000


    После установки в командной строке PyCharm пишем:

        heroku login (если команда не работает перезагружаем PyCharm)

        вводим пароль от учётной записи -> Logging in... done

        heroku git:remote -a django-project-darthvaderon

        git push heroku master (ждем окончания загрузки)

            ...
            remote: Verifying deploy... done.
            To https://git.heroku.com/django-project-darthvaderon.git
             * [new branch]      master -> master

        Нажимаем на ссылку/ или на сайте Open app (если все хорошо проект откроется с ошибкой хоста)


    Если возникла ошибка (ProgrammingError at /) relation "django_session" does not exist:

        heroku run python manage.py makemigrations sessions
        heroku run python manage.py migrate sessions


    Если возникла ошибка (Application error) смотрим отчёт:

        heroku logs --tail


    Далее в файле settings.py пишем код что бы ошибка хостом исчезла:

        ALLOWED_HOSTS = ['*']


Создание superuser


    Устанавливаем:

        pip install django-heroku


    Дописываем в файле settings.py :

        Django settings for Django project.

        Generated by 'django-admin startproject' using Django 4.0.4.

        For more information on this file, see
        https://docs.djangoproject.com/en/4.0/topics/settings/

        For the full list of settings and their values, see
        https://docs.djangoproject.com/en/4.0/ref/settings/



        import os
        from pathlib import Path
        from dotenv import load_dotenv
        import django_heroku                                                                            # импортируем


        # Build paths inside the project like this: BASE_DIR / 'subdir'.


        BASE_DIR = Path(__file__).resolve().parent.parent


        # Load dotenv


        load_dotenv()
        env_path = Path('.') / '.env'
        load_dotenv(dotenv_path=env_path)


        # Quick-start development settings - unsuitable for production
        # See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/
        # SECURITY WARNING: keep the secret key used in production secret!


        SECRET_KEY = str(os.getenv('SECRET_KEY'))


        # SECURITY WARNING: don't run with debug turned on in production!


        DEBUG = True
        ALLOWED_HOSTS = ['*']


        # Standard URL Login Required


        LOGIN_URL = '/authorization'
        LOGIN_REDIRECT_URL = '/authorization'


        # Application definition


        INSTALLED_APPS = [
            'admin_interface',
            'colorfield',
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
            'comments_app',
            'django_celery_results',
            'friendship_app',
            'likes_app',
            'media_app',
            'menu_app',
            'messenger_app',
            'profile_app',
            'publication_app',
            'tags_app',
            'drf_spectacular',
            'rest_framework',
        ]

        # AUTH_USER_MODEL = 'publication_app.User'


        MIDDLEWARE = [
            'django.middleware.security.SecurityMiddleware',
            'django.contrib.sessions.middleware.SessionMiddleware',
            'django.middleware.common.CommonMiddleware',
            'django.middleware.csrf.CsrfViewMiddleware',
            'django.contrib.auth.middleware.AuthenticationMiddleware',
            'django.contrib.messages.middleware.MessageMiddleware',
            'django.middleware.clickjacking.XFrameOptionsMiddleware',
        ]

        ROOT_URLCONF = 'Django.urls'


        TEMPLATES = [
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': [os.path.join(BASE_DIR, 'templates')],
                'APP_DIRS': True,
                'OPTIONS': {
                    'context_processors': [
                        'django.template.context_processors.debug',
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                    ],
                },
            },
        ]

        WSGI_APPLICATION = 'Django.wsgi.application'


        # Database
        # https://docs.djangoproject.com/en/4.0/ref/settings/#databases


        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            'CONN_MAX_AGE': 60,                                                                        # дописываем
            }
        }


        # Password validation
        # https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators


        AUTH_PASSWORD_VALIDATORS = [
            {
                'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
            },
        ]


        # Internationalization
        # https://docs.djangoproject.com/en/4.0/topics/i18n/


        LANGUAGE_CODE = 'en-us'

        TIME_ZONE = 'UTC'

        USE_I18N = True

        USE_TZ = True


        # Static files (CSS, JavaScript, Images)
        # https://docs.djangoproject.com/en/4.0/howto/static-files/


        STATIC_ROOT = os.path.join(BASE_DIR, 'static')
        STATIC_URL = 'static/'


        MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
        MEDIA_URL = 'media/'


        # Default primary key field type
        # https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field


        DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


        REST_FRAMEWORK = {
            #YOUR SETTINGS
            'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
            'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
            'PAGE_SIZE': 5
        }


        SPECTACULAR_SETTINGS = {
            'COMPONENT_SPLIT_REQUEST': True
        }


        CELERY_BROKER_URL = 'redis://localhost:6379'
        CELERY_RESULT_BACKEND = 'django-db'
        CELERY_CACHE_BACKEND = 'django-cache'


        EMAIL_HOST = str(os.getenv('EMAIL_HOST'))
        EMAIL_PORT = 465
        EMAIL_HOST_USER = str(os.getenv('EMAIL_HOST_USER'))           # Enter your email address
        EMAIL_HOST_PASSWORD = str(os.getenv('EMAIL_HOST_PASSWORD'))   # Enter your email password
        EMAIL_USE_TLS = False
        EMAIL_USE_SSL = True


        django_heroku.settings(locals())                                                                # дописываем


    Пишем в терминале:

        git status

        git add .

        git commit -m ""

        git push heroku master (ждем окончания загрузки)

        heroku run python manage.py migrate

        heroku run -a django-darth-vader-on python manage.py createsuperuser

            Name

            email

            password

            password (подтверждение)


Отправка писем при регистрации на heroku


    Заходим на сайт https://dashboard.heroku.com/apps/{name project}:

        Заходим в Settings

        Config Vars

        Reveal Config Vars

        Добавляем переменные с .env
"""