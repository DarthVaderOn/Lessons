# Асинхронный Python: multiprocessing — Параллелизм на основе процессов.


"""
Асинхронный Python: multiprocessing — Параллелизм на основе процессов.


        multiprocessing — это пакет, поддерживающий порождение процессов с использованием API, аналогичный модулю threading. Пакет multiprocessing предлагает как локальный, так и удаленный параллелизм,
    эффективно обходя Глобальную блокировку интерпретатора за счёт использования подпроцессов вместо потоков. Благодаря этому, модуль multiprocessing позволяет программисту полностью использовать несколько
    процессоров на компьютере. Он работает как в Unix, так и в Windows.

    Контексты и методы запуска
    В зависимости от платформы multiprocessing поддерживает три способа запуска процесса. Далее перечислены методы запуска:

        spawn
        Родительский процесс запускает новый процесс интерпретатора Python. Дочерний процесс унаследует только те ресурсы, которые необходимы для выполнения метода run() объекта процесса. В частности,
        ненужные файловые дескрипторы и дескрипторы родительского процесса не будут унаследованы. Запуск процесса с использованием этого метода довольно медленный по сравнению с использованием fork или forkserver.
        Доступен в Unix и Windows. По умолчанию в Windows и macOS.

        fork
        Родительский процесс использует os.fork() для разветвления интерпретатора Python. Когда начинается дочерний процесс, фактически идентичен родительскому процессу. Все ресурсы родителя наследуются дочерним процессом.
        Обратите внимание, что безопасное разветвление многопоточного процесса проблематично. Доступен только в Unix. По умолчанию в Unix.

        forkserver
        С этого момента всякий раз, когда требуется новый процесс, родительский процесс подключается к серверу и запрашивает у него форк для нового процесса. Процесс сервера форка является однопоточным, поэтому для него
        безопасно использовать os.fork(). Никакие ненужные ресурсы не наследуются. Доступен на платформах Unix, которые поддерживают передачу файловых дескрипторов по каналам (pipes) Unix.


    Что такое многопроцессорность ?
        По сути, многопроцессорность означает параллельное выполнение двух или более задач. Итак, в python мы можем использовать встроенный модуль многопроцессорности python для достижения этого. Представьте, что у вас есть
    десять функций, выполнение которых занимает десять секунд, и вы в ситуации, когда вы хотите запустить эту долго работающую функцию десять раз. Без сомнения, это займет сто секунд, если вы запустите его последовательно.
    Вот где многопроцессорность вступает в действие. Используя многопроцессорность, вы можете разделить эти десять процессов на десять подпроцессов и выполнить все за десять секунд.

    Разница между многопроцессорностью и многопоточностью ?
        Итак, вы не задавались вопросом, почему мы используем многопроцессорность вместо многопоточности? В приведенном выше примере хорошо использовать многопоточность, но если ваша функция требует большей вычислительной
    мощности и памяти, идеально использовать многопроцессорность, потому что при использовании многопроцессорности каждый подпроцесс будет иметь выделенный процессор и слот памяти . Таким образом, идеально использовать
    многопроцессорность вместо многопоточности, если ваша долго выполняющаяся функция требует большей вычислительной мощности и памяти.
"""